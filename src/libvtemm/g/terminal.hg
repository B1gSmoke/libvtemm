/* terminal.h
 *
 * Copyright (C) 2008 libvtemm Development Team
 *
 * This file is part of libvtemm.
 *
 * libvtemm is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * libvtemm is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser Public License for more details.
 *
 * You should have received a copy of the GNU Lesser Public License
 * along with libvtemm.  If not, see <http://www.gnu.org/licenses/>.
 */

_CONFIGINCLUDE(libvtemmconfig.h)

_DEFS(libvtemm,libvte)
_PINCLUDE(gtkmm/private/widget_p.h)

#include <gdkmm.h>
#include <glibmm.h>
#include <gtkmm.h>
#include <libvtemm/textandcharattrs.h>
#include <pangomm.h>
#include <sigc++/sigc++.h>

namespace Gnome
{

namespace Vte
{

_WRAP_ENUM(TerminalEraseBinding, VteTerminalEraseBinding)
_DEPRECATE_IFDEF_START
_WRAP_ENUM(TerminalAntiAlias, VteTerminalAntiAlias)
_DEPRECATE_IFDEF_END
_WRAP_ENUM(TerminalCursorBlinkMode, VteTerminalCursorBlinkMode)
_WRAP_ENUM(TerminalCursorShape, VteTerminalCursorShape)

/** Terminal - a terminal emulator implemented as a gtkmm widget.
 */
class Terminal : public Gtk::Widget
{
  _CLASS_GTKOBJECT(Terminal, VteTerminal, VTE_TERMINAL, Gtk::Widget, GtkWidget)
public:
  _CTOR_DEFAULT()
  _WRAP_METHOD(Glib::Pid fork_command(const std::string& command, const Glib::StringArrayHandle& argv, const Glib::StringArrayHandle& envv, const std::string& directory, bool lastlog, bool utmp, bool wtmp), vte_terminal_fork_command)

  _WRAP_METHOD(Glib::Pid forkpty(const Glib::StringArrayHandle& envv, const std::string& directory, bool lastlog, bool utmp, bool wtmp), vte_terminal_forkpty)

  _WRAP_METHOD_DOCS_ONLY(vte_terminal_feed)
  void feed(const Glib::ustring& data);
  _WRAP_METHOD_DOCS_ONLY(vte_terminal_feed_child)
  void feed_child(const Glib::ustring& text);
  _WRAP_METHOD_DOCS_ONLY(vte_terminal_feed_child_binary)
  void feed_child_binary(const std::string& data);
  _IGNORE(vte_terminal_feed, vte_terminal_feed_child, vte_terminal_feed_child_binary)

  _WRAP_METHOD(void copy_clipboard(), vte_terminal_copy_clipboard)
  _WRAP_METHOD(void paste_clipboard(), vte_terminal_paste_clipboard)
  _WRAP_METHOD(void copy_primary(), vte_terminal_copy_primary)
  _WRAP_METHOD(void paste_primary(), vte_terminal_paste_primary)

  _WRAP_METHOD(void select_all(), vte_terminal_select_all)
  _WRAP_METHOD(void select_none(), vte_terminal_select_none)

  _WRAP_METHOD(void set_size(long columns, long rows), vte_terminal_set_size)

  _WRAP_METHOD(void set_audible_bell(bool is_audible), vte_terminal_set_audible_bell)
  _WRAP_METHOD(bool get_audible_bell(), vte_terminal_get_audible_bell)
  _WRAP_METHOD(bool get_audible_bell() const, vte_terminal_get_audible_bell, constversion)
  _WRAP_METHOD(void set_visible_bell(bool is_visible), vte_terminal_set_visible_bell)
  _WRAP_METHOD(bool get_visible_bell(), vte_terminal_get_visible_bell)
  _WRAP_METHOD(bool get_visible_bell() const, vte_terminal_get_visible_bell, constversion)
  _WRAP_METHOD(void set_scroll_background(bool scroll), vte_terminal_set_scroll_background)
  _WRAP_METHOD(void set_scroll_on_output(bool scroll), vte_terminal_set_scroll_on_output)
  _WRAP_METHOD(void set_scroll_on_keystroke(bool scroll), vte_terminal_set_scroll_on_keystroke)

  _WRAP_METHOD(void set_color_dim(const Gdk::Color& dim), vte_terminal_set_color_dim)
  _WRAP_METHOD(void set_color_bold(const Gdk::Color& bold), vte_terminal_set_color_bold)
  _WRAP_METHOD(void set_color_foreground(const Gdk::Color& foreground), vte_terminal_set_color_foreground)
  _WRAP_METHOD(void set_color_background(const Gdk::Color& background), vte_terminal_set_color_background)
  _WRAP_METHOD(void set_color_cursor(const Gdk::Color& cursor_background), vte_terminal_set_color_cursor)
  _WRAP_METHOD(void set_color_highlight(const Gdk::Color& highlight_background), vte_terminal_set_color_highlight)
  _WRAP_METHOD_DOCS_ONLY(vte_terminal_set_colors)
  void set_colors(const Gdk::Color& foreground, const Gdk::Color& background, const Gdk::ArrayHandle_Color& palette);
  _IGNORE(vte_terminal_set_colors)
  _WRAP_METHOD(void set_default_colors(), vte_terminal_set_default_colors)

  _WRAP_METHOD(void set_background_image(const Glib::RefPtr<Gdk::Pixbuf>& image), vte_terminal_set_background_image)
  _WRAP_METHOD(void set_background_image_file(const std::string& path), vte_terminal_set_background_image_file)
  _WRAP_METHOD(void set_background_tint_color(const Gdk::Color& color), vte_terminal_set_background_tint_color)
  _WRAP_METHOD(void set_background_saturation(double saturation), vte_terminal_set_background_saturation)
  _WRAP_METHOD(void set_background_transparent(bool transparent), vte_terminal_set_background_transparent)
  _WRAP_METHOD(void set_opacity(guint16 opacity), vte_terminal_set_opacity)

  _WRAP_METHOD(void set_cursor_blinks(bool blink), vte_terminal_set_cursor_blinks, deprecated "Use set_cursor_blink_mode instead")
  _WRAP_METHOD(void set_cursor_blink_mode(TerminalCursorBlinkMode mode), vte_terminal_set_cursor_blink_mode)
  _WRAP_METHOD(TerminalCursorBlinkMode get_cursor_blink_mode(), vte_terminal_get_cursor_blink_mode)
  _WRAP_METHOD(TerminalCursorBlinkMode get_cursor_blink_mode() const, vte_terminal_get_cursor_blink_mode, constversion)
  
  _WRAP_METHOD(void set_cursor_shape(TerminalCursorShape shape), vte_terminal_set_cursor_shape)
  _WRAP_METHOD(TerminalCursorShape get_cursor_shape(), vte_terminal_get_cursor_shape)
  _WRAP_METHOD(TerminalCursorShape get_cursor_shape() const, vte_terminal_get_cursor_shape, constversion)

  _WRAP_METHOD(void set_scrollback_lines(long lines), vte_terminal_set_scrollback_lines)

  _WRAP_METHOD(void im_append_menuitems(Gtk::MenuShell& menushell), vte_terminal_im_append_menuitems)

  _WRAP_METHOD(void set_font(const Pango::FontDescription& font_desc), vte_terminal_set_font)
  _WRAP_METHOD(void set_font_full(const Pango::FontDescription& font_desc, TerminalAntiAlias antialias), vte_terminal_set_font_full, deprecated)
  _WRAP_METHOD(void set_font_from_string(const Glib::ustring& name), vte_terminal_set_font_from_string)
  _WRAP_METHOD(void set_font_from_string_full(const Glib::ustring name, TerminalAntiAlias antialias), vte_terminal_set_font_from_string_full, deprecated)
  _WRAP_METHOD(const Pango::FontDescription get_font(), vte_terminal_get_font)
  _WRAP_METHOD(const Pango::FontDescription get_font() const, vte_terminal_get_font, constversion)
  _WRAP_METHOD(bool get_using_xft(), vte_terminal_get_using_xft, deprecated)
  _WRAP_METHOD(bool get_using_xft() const, vte_terminal_get_using_xft, constversion, deprecated)
  _WRAP_METHOD(void set_allow_bold(bool allow_bold), vte_terminal_set_allow_bold)
  _WRAP_METHOD(bool get_allow_bold(), vte_terminal_get_allow_bold)
  _WRAP_METHOD(bool get_allow_bold() const, vte_terminal_get_allow_bold, constversion)

  _WRAP_METHOD(bool get_has_selection(), vte_terminal_get_has_selection)
  _WRAP_METHOD(bool get_has_selection() const, vte_terminal_get_has_selection, constversion)

  _WRAP_METHOD(void set_word_chars(const Glib::ustring& spec), vte_terminal_set_word_chars)
  _WRAP_METHOD(bool is_word_char(gunichar c), vte_terminal_is_word_char)

  _WRAP_METHOD(void set_backspace_binding(TerminalEraseBinding binding), vte_terminal_set_backspace_binding)
  _WRAP_METHOD(void set_delete_binding(TerminalEraseBinding binding), vte_terminal_set_delete_binding)

  _WRAP_METHOD(void set_mouse_autohide(bool setting), vte_terminal_set_mouse_autohide)
  _WRAP_METHOD(bool get_mouse_autohide() const, vte_terminal_get_mouse_autohide, constversion)

  _WRAP_METHOD(void reset(bool full, bool clear_history), vte_terminal_reset)

  typedef sigc::slot<bool, Terminal& /* terminal */, long /* column */, long /* row */> SlotSelectedCallback;
  _WRAP_METHOD_DOCS_ONLY(vte_terminal_get_text)
  TextAndCharAttrs get_text(const SlotSelectedCallback& slot);
  TextAndCharAttrs get_text(const SlotSelectedCallback& slot) const;
  _WRAP_METHOD_DOCS_ONLY(vte_terminal_get_text_include_trailing_spaces)
  TextAndCharAttrs get_text_include_trailing_spaces(const SlotSelectedCallback& slot);
  TextAndCharAttrs get_text_include_trailing_spaces(const SlotSelectedCallback& slot) const;
  _WRAP_METHOD_DOCS_ONLY(vte_terminal_get_text_range)
  TextAndCharAttrs get_text_range(long start_row, long start_col, long end_row, long end_col, const SlotSelectedCallback& slot);
  TextAndCharAttrs get_text_range(long start_row, long start_col, long end_row, long end_col, const SlotSelectedCallback& slot) const;
  _IGNORE(vte_terminal_get_text, vte_terminal_get_text_include_trailing_spaces, vte_terminal_get_text_range)
  _WRAP_METHOD(void get_cursor_position(long& column, long& row), vte_terminal_get_cursor_position)
  _WRAP_METHOD(void get_cursor_position(long& column, long& row) const, vte_terminal_get_cursor_position, constversion)

  _WRAP_METHOD(void match_clear_all(), vte_terminal_match_clear_all)

  _WRAP_METHOD(int match_add(const Glib::ustring& match), vte_terminal_match_add, deprecated "Use match_add_gregex instead")
  _WRAP_METHOD(int match_add_gregex(Glib::RefPtr<Glib::Regex> regex, Glib::RegexMatchFlags flags), vte_terminal_match_add_gregex)

  _WRAP_METHOD(void match_set_cursor(int tag, Gdk::Cursor& cursor), vte_terminal_match_set_cursor)
  _WRAP_METHOD(void match_set_cursor_type(int tag, Gdk::CursorType cursor_type), vte_terminal_match_set_cursor_type)
  _WRAP_METHOD(void match_set_cursor_name(int tag, const Glib::ustring& cursor_name), vte_terminal_match_set_cursor_name)

  _WRAP_METHOD(void match_remove(int tag), vte_terminal_match_remove)

  _WRAP_METHOD_DOCS_ONLY(vte_terminal_match_check)
  Glib::ustring match_check(long column, long row, int& tag);
  _IGNORE(vte_terminal_match_check)

  _WRAP_METHOD(void set_emulation(const Glib::ustring& emulation), vte_terminal_set_emulation)
  _WRAP_METHOD(const Glib::ustring get_emulation(), vte_terminal_get_emulation)
  _WRAP_METHOD(const Glib::ustring get_emulation() const, vte_terminal_get_emulation, constversion)
  _WRAP_METHOD(const Glib::ustring get_default_emulation(), vte_terminal_get_default_emulation)
  _WRAP_METHOD(const Glib::ustring get_default_emulation() const, vte_terminal_get_default_emulation, constversion)

  _WRAP_METHOD(void set_encoding(const Glib::ustring& codeset), vte_terminal_set_encoding)
  _WRAP_METHOD(const Glib::ustring get_encoding(), vte_terminal_get_encoding)
  _WRAP_METHOD(const Glib::ustring get_encoding() const, vte_terminal_get_encoding, constversion)

  _WRAP_METHOD(const Glib::ustring get_status_line(), vte_terminal_get_status_line)
  _WRAP_METHOD(const Glib::ustring get_status_line() const, vte_terminal_get_status_line, constversion)

  _WRAP_METHOD(void get_padding(int& xpad, int& ypad), vte_terminal_get_padding)
  _WRAP_METHOD(void get_padding(int& xpad, int& ypad) const, vte_terminal_get_padding, constversion)

  _WRAP_METHOD(void set_pty(int pty_master), vte_terminal_set_pty)
  _WRAP_METHOD(int get_pty(), vte_terminal_get_pty)
  _WRAP_METHOD(int get_pty() const, vte_terminal_get_pty, constversion)

  _WRAP_METHOD(Gtk::Adjustment* get_adjustment(), vte_terminal_get_adjustment)
  _WRAP_METHOD(Gtk::Adjustment const* get_adjustment() const, vte_terminal_get_adjustment, constversion)
  _WRAP_METHOD(long get_char_width(), vte_terminal_get_char_width)
  _WRAP_METHOD(long get_char_width() const, vte_terminal_get_char_width, constversion)
  _WRAP_METHOD(long get_char_height(), vte_terminal_get_char_height)
  _WRAP_METHOD(long get_char_height() const, vte_terminal_get_char_height, constversion)
  _WRAP_METHOD(long get_char_descent(), vte_terminal_get_char_descent, deprecated)
  _WRAP_METHOD(long get_char_descent() const, vte_terminal_get_char_descent, deprecated, constversion)
  _WRAP_METHOD(long get_char_ascent(), vte_terminal_get_char_ascent, deprecated)
  _WRAP_METHOD(long get_char_ascent() const, vte_terminal_get_char_ascent, deprecated, constversion)
  _WRAP_METHOD(long get_row_count(), vte_terminal_get_row_count)
  _WRAP_METHOD(long get_row_count() const, vte_terminal_get_row_count, constversion)
  _WRAP_METHOD(long get_column_count(), vte_terminal_get_column_count)
  _WRAP_METHOD(long get_column_count() const, vte_terminal_get_column_count, constversion)
  _WRAP_METHOD(const Glib::ustring get_window_title(), vte_terminal_get_window_title)
  _WRAP_METHOD(const Glib::ustring get_window_title() const, vte_terminal_get_window_title, constversion)
  _WRAP_METHOD(const Glib::ustring get_icon_title(), vte_terminal_get_icon_title)
  _WRAP_METHOD(const Glib::ustring get_icon_title() const, vte_terminal_get_icon_title, constversion)
  
  _WRAP_METHOD(int get_child_exit_status(), vte_terminal_get_child_exit_status)
  _WRAP_METHOD(int get_child_exit_status() const, vte_terminal_get_child_exit_status, const)

  _WRAP_SIGNAL(void eof(), "eof")
  _WRAP_SIGNAL(void child_exited(), "child-exited")
  _WRAP_SIGNAL(void emulation_changed(), "emulation-changed")
  _WRAP_SIGNAL(void encoding_changed(), "encoding-changed")
  _WRAP_SIGNAL(void char_size_changed(guint char_width, guint char_height), "char-size-changed")
  _WRAP_SIGNAL(void window_title_changed(), "window-title-changed")
  _WRAP_SIGNAL(void icon_title_changed(), "icon-title-changed")
  _WRAP_SIGNAL(void selection_changed(), "selection-changed")
  _WRAP_SIGNAL(void contents_changed(), "contents-changed")
  _WRAP_SIGNAL(void cursor_moved(), "cursor-moved")
  _WRAP_SIGNAL(void status_line_changed(), "status-line-changed")
  // the one below could just send std::string...
  _WRAP_SIGNAL(void commit(char* text, guint size), "commit")
  
  _WRAP_SIGNAL(void deiconify_window(), "deiconify-window")
  _WRAP_SIGNAL(void iconify_window(), "iconify-window")
  _WRAP_SIGNAL(void raise_window(), "raise-window")
  _WRAP_SIGNAL(void lower_window(), "lower-window")
  _WRAP_SIGNAL(void refresh_window(), "refresh-window")
  _WRAP_SIGNAL(void restore_window(), "restore-window")
  _WRAP_SIGNAL(void maximize_window(), "maximize-window")
  _WRAP_SIGNAL(void resize_window(guint width, guint height), "resize-window")
  _WRAP_SIGNAL(void move_window(guint x, guint y), "move-window")
  
  _WRAP_SIGNAL(void increase_font_size(), "increase-font-size")
  _WRAP_SIGNAL(void decrease_font_size(), "decrease-font-size")
  
  _WRAP_SIGNAL(void text_modified(), "text-modified")
  _WRAP_SIGNAL(void text_inserted(), "text-inserted")
  _WRAP_SIGNAL(void text_deleted(), "text-deleted")
  _WRAP_SIGNAL(void text_scrolled(int delta), "text-scrolled")
  _WRAP_SIGNAL(void copy_clipboard(), "copy-clipboard")
  _WRAP_SIGNAL(void paste_clipboard(), "paste-clipboard")
  _WRAP_SIGNAL(void set_scroll_adjustments(Gtk::Adjustment* hadjustment, Gtk::Adjustment* vadjustment), "set-scroll-adjustments", no_default_handler)
  _WRAP_SIGNAL(void beep(), "beep", no_default_handler)
  
  _WRAP_PROPERTY("allow-bold", bool)
  _WRAP_PROPERTY("audible-bell", bool)
  _WRAP_PROPERTY("background-image-file", Glib::ustring)
  _WRAP_PROPERTY("background-image-pixbuf", Gdk::Pixbuf)
  _WRAP_PROPERTY("background-opacity", double)
  _WRAP_PROPERTY("background-saturation", double)
  _WRAP_PROPERTY("background-tint-color", Gdk::Color)
  _WRAP_PROPERTY("background-transparent", bool)
  _WRAP_PROPERTY("backspace-binding", TerminalEraseBinding)
  _WRAP_PROPERTY("cursor-blink-mode", TerminalCursorBlinkMode)
  _WRAP_PROPERTY("cursor-shape", TerminalCursorShape)
  _WRAP_PROPERTY("delete-binding", TerminalEraseBinding)
  _WRAP_PROPERTY("emulation", Glib::ustring)
  _WRAP_PROPERTY("encoding", Glib::ustring)
  _WRAP_PROPERTY("font-desc", Pango::FontDescription)
  _WRAP_PROPERTY("icon-title", Glib::ustring)
  _WRAP_PROPERTY("pointer-autohide", bool)
  _WRAP_PROPERTY("pty", int)
  _WRAP_PROPERTY("scroll-background", bool)
  _WRAP_PROPERTY("scroll-on-keystroke", bool)
  _WRAP_PROPERTY("scroll-on-output", bool)
  _WRAP_PROPERTY("scrollback-lines", int)
  _WRAP_PROPERTY("visible-bell", bool)
  _WRAP_PROPERTY("window-title", Glib::ustring)
  _WRAP_PROPERTY("word-chars", Glib::ustring)
};

} // namespace Vte

} // namespace Gnome
